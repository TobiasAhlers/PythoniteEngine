from typing import ClassVar, Any, TYPE_CHECKING

from ..pythonite_representation import PythoniteRepresentation
from ..scope import Scope

from .base import ValueSource

if TYPE_CHECKING:
    from ..pythonite_engine import PythoniteEngine


class FunctionSource(ValueSource):
    """
    Represents a function source. A function source is a dynamic value that is generated by executing a function.

    Attributes:
        function_id (str): The id of the function represented by this class.
        args (dict[str, Any]): The arguments to pass to the function represented by this class.

    Example:
    >>> from pythonite_engine.value_sources import FunctionSource
    >>> function_source = FunctionSource(function_id="my_function", args={"arg1": 5})
    >>> function_source.execute()
    10
    """

    __pythonite_signature__: ClassVar[str] = "FunctionSource"

    function_id: str
    args: dict[str, Any] = {}

    def execute(self, scope: Scope, engine: "PythoniteEngine", *args, **kwargs) -> Any:
        """
        Execute the function value represented by this class.

        Returns:
            Any: The value of the function value represented by this class.

        Example:
        >>> from pythonite_engine.value_sources import FunctionSource
        >>> function_source = FunctionSource(function_id="my_function", args={"arg1": 5})
        >>> function_source.execute()
        10
        """
        for key, value in self.args.items():
            if isinstance(value, PythoniteRepresentation):
                self.args[key] = value.execute(
                    scope=scope, engine=engine, *args, **kwargs
                )
        return engine.get_function(function_id=self.function_id)(**self.args)
